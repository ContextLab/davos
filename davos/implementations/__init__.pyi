from typing import Any, NoReturn, Optional, Union
from davos.core.config import DavosConfig
from davos.implementations import (
    ipython_common as ipyc, 
    ipython_post7 as ipypost, 
    ipython_pre7 as ipypre, 
    python as py
)

_activate_helper: Union[ipypost._activate_helper, ipypost._activate_helper, py._activate_helper]
_check_conda_avail_helper: Union[ipyc._check_conda_avail_helper, py._check_conda_avail_helper]
_deactivate_helper: Union[ipypost._deactivate_helper, ipypre._deactivate_helper, py._deactivate_helper]
_run_shell_command_helper: Union[ipyc._run_shell_command_helper, py._run_shell_command_helper]
_set_custom_showsyntaxerror: ipyc._set_custom_showsyntaxerror
_showsyntaxerror_davos: ipyc._showsyntaxerror_davos

def _active_fget(conf: DavosConfig) -> bool: ...
def _active_fset(conf: DavosConfig, value: bool) -> None: ...
def _conda_avail_fget(conf: DavosConfig) -> bool: ...
def _conda_avail_fset(conf: DavosConfig, _: Any) -> NoReturn: ...
def _conda_env_fget(conf: DavosConfig) -> Optional[str]: ...
def _conda_env_fset(conf: DavosConfig, new_env: str) -> None: ...
def _conda_envs_dirs_fget(conf: DavosConfig) -> Optional[dict[str, str]]: ...
def _conda_envs_dirs_fset(conf: DavosConfig, _: Any) -> NoReturn: ...