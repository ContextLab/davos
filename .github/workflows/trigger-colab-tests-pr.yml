name: Trigger Colab CI Tests for Pull Request

on:
  issue_comment:
    types: [created]

defaults:
  run:
    shell: bash -leo pipefail {0}

jobs:
  trigger-tests-from-comment:
    name: "Trigger Colab CI Tests from PR Comment"
    runs-on: ubuntu-latest
    # run if all of the following are true:
    #   - the comment was made on a pull request (rather than an issue)
    #   - the base of the pull request is ContextLab/davos
    #   - the head of the pull request is a different fork (rather than just a branch)
    #   - the comment was made by paxtonfitzpatrick
    #   - the github-actions bot was tagged at the beginning of the comment
    if: >
      github.event.issue.pull_request
      && github.repository_owner == 'ContextLab'
      && github.event.issue.user.login != 'ContextLab'
      && (github.event.comment.user.login == 'paxtonfitzpatrick' || github.event.comment.user.login == 'jeremymanning')
      && startsWith(github.event.comment.body, '@github-actions ')
    steps:
      - name: Check Whether Comment Triggers Workflow
        id: check-comment
        uses: actions/github-script@v4
        with:
          script: |
            console.log(`Possible dispatch comment by ${context.payload.comment.user.login} on pull PR #${context.issue.number}`)

            // keywords that trigger Colab CI tests
            const approveStrings = ['approve', 'run', 'yes', '👍'],
            // comment body with @github-actions bot tag removed
                commentBody = context.payload.comment.body.replace(/@github-actions\s+/, '');

            console.log(`parsing possible dispatch trigger comment:
                ${context.payload.comment.body}
            for dispatch keywords:
                ${approveStrings}`)

            // if the comment contains any of the keyword strings
            if (approveStrings.some(str => commentBody.includes(str))) {
                console.log('comment contains dispatch keyword');
                try {
                // request pull_request event from rest API
                    console.log('getting data for pull request...');
                    const response = await github.pulls.get({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        pull_number: context.issue.number
                    });
                    const pullRequest = response.data;
                    // set outputs for use in next step
                    console.log('setting outputs...')
                    core.setOutput('head_fork', pullRequest.head.user.login);
                    core.setOutput('head_sha', pullRequest.head.sha);
                    core.setOutput('trigger_tests', 'true');
                    console.log(`head_fork: ${pullRequest.head.user.login}`);
                    console.log(`head_sha: ${pullRequest.head.sha}`);
                } catch(error) {
                    core.setFailed(`Failed to get pull_request event from issue_comment: ${error}`);
                }
                // react to comment with thumbs-up to confirm
                console.log('adding reaction to triggering comment...');
                await github.reactions.createForIssueComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: context.payload.comment.id,
                    content: 'rocket'
                });
            } else {
                console.log('comment does not trigger tests');
                core.setOutput('trigger_tests', 'false');
            }

      - name: Dispatch Colab CI Test Workflow
        if: steps.check-comment.outputs.trigger_tests == 'true'
        env:
          HEAD_FORK: ${{ steps.check-comment.outputs.head_fork }}
          HEAD_SHA: ${{ steps.check-comment.outputs.head_sha }}
        uses: actions/github-script@v4
        with:
          script: |
            console.log(`dispatching Colab CI test workflow...
                owner: ${context.repo.owner},
                repo: ${context.repo.repo},
                ref: ${context.ref},
                inputs.fork: ${process.env.HEAD_FORK},
                inputs.commit: ${process.env.HEAD_SHA}
            `);
            await github.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'ci-tests-colab.yml',
                ref: context.ref,
                inputs: {
                    fork: process.env.HEAD_FORK,
                    commit: process.env.HEAD_SHA,
                    debug_enabled: 'false'
                }
            });
